## 取值方式

### #{paramName}
设置预编译Sql参数，可以防止sql注入，绝大部分场景都应使用此种方式
    <select id="getByEmpNo" resultType="cc.lzy.mybatis.dal.entity.EmployeeDO" databaseId="mysql">
        select <include refid="base_column"/> from Employee where emp_no = #{whatever}
    </select>

上述取值方式的执行过程：

预编译sql： select id, emp_no, name, age, position, level, address, email, hire_date from Employee where emp_no = ?
设置参数值： Parameters: 000001(String)

而且，#{}取值时，还可以指定一些其他属性，例如：#{id,jdbcType=NULL}

### ${paramName}
直接取值，拼接sql，不能防止sql注入，必须使用@Param注解显式指定参数名，不支持#{}单参数值获取的方式(随意指定参数名或者内置param1、arg0..这种)。

使用场景：对于原生JDBC不支持预编译占位符参数的地方，可以使用${}的方式，比如

    * 分表时动态计算表名，作为参数传入，${tableName}
    * 动态指定按某列排序和升降序 order by ${fieldName} ${order}

    <select id="getByEmpNo" resultType="cc.lzy.mybatis.dal.entity.EmployeeDO">
        select <include refid="base_column"/> from Employee where emp_no = ${empNo}
    </select>

    EmployeeDO getByEmpNo(@Param("empNo") String empNo);

发出的sql：select id, emp_no, name, age, position, level, address, email, hire_date from Employee where emp_no = 000001


### Mybatis 内置参数

内置2个参数：
    * _parameter
        * 如果是单个参数，_parameter就代表此参数
        * 如果是多个参数，_parameter就代表封装后的Map对象
    * _databaseId

